import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import { MetricsAnalysis } from '../calculations/metrics';
import { Scenario } from '../calculations/scenarios';

export interface ExportData {
  analysis: MetricsAnalysis;
  scenario: Scenario | null;
  timestamp: Date;
}

export async function exportToPDF(data: ExportData): Promise<void> {
  try {
    // Create a temporary div for the PDF content
    const exportContainer = document.createElement('div');
    exportContainer.id = 'pdf-export-content';
    exportContainer.style.position = 'absolute';
    exportContainer.style.left = '-9999px';
    exportContainer.style.width = '800px';
    exportContainer.style.padding = '20px';
    exportContainer.style.backgroundColor = 'white';
    exportContainer.style.fontFamily = 'Arial, sans-serif';

    const { analysis, scenario, timestamp } = data;
    const { metrics, status, feedback, recommendations } = analysis;

    exportContainer.innerHTML = `
      <div style="text-align: center; margin-bottom: 30px;">
        <h1 style="color: #4F46E5; margin-bottom: 10px;">SaaS Metrics Report</h1>
        <p style="color: #666; margin: 0;">Generated on ${timestamp.toLocaleDateString()}</p>
        ${scenario ? `<p style="color: #666; margin: 5px 0;">Scenario: ${scenario.emoji} ${scenario.name}</p>` : ''}
      </div>

      <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
        <h2 style="color: #333; margin-top: 0;">Overall Status: ${status.toUpperCase()}</h2>
        <p style="color: #666; line-height: 1.5;">${feedback}</p>
      </div>

      <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 30px;">
        <div style="background: #f0f9ff; padding: 15px; border-radius: 8px;">
          <h3 style="margin-top: 0; color: #1e40af;">Customer Acquisition Cost (CAC)</h3>
          <p style="font-size: 24px; font-weight: bold; margin: 10px 0; color: #1e40af;">$${metrics.cac.toFixed(0)}</p>
          <p style="color: #666; font-size: 14px; margin: 0;">Cost to acquire one customer</p>
        </div>
        <div style="background: #f0fdf4; padding: 15px; border-radius: 8px;">
          <h3 style="margin-top: 0; color: #166534;">Customer Lifetime Value (LTV)</h3>
          <p style="font-size: 24px; font-weight: bold; margin: 10px 0; color: #166534;">$${metrics.ltv.toFixed(0)}</p>
          <p style="color: #666; font-size: 14px; margin: 0;">Total value from one customer</p>
        </div>
      </div>

      <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 30px;">
        <div style="background: #fefce8; padding: 15px; border-radius: 8px;">
          <h3 style="margin-top: 0; color: #a16207;">LTV:CAC Ratio</h3>
          <p style="font-size: 24px; font-weight: bold; margin: 10px 0; color: #a16207;">${metrics.ltvCacRatio.toFixed(1)}:1</p>
          <p style="color: #666; font-size: 14px; margin: 0;">Target: 3:1 or higher</p>
        </div>
        <div style="background: #fdf2f8; padding: 15px; border-radius: 8px;">
          <h3 style="margin-top: 0; color: #be185d;">Payback Period</h3>
          <p style="font-size: 24px; font-weight: bold; margin: 10px 0; color: #be185d;">${metrics.paybackPeriod.toFixed(1)} months</p>
          <p style="color: #666; font-size: 14px; margin: 0;">Time to recover CAC</p>
        </div>
      </div>

      <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 30px;">
        <div style="background: #f1f5f9; padding: 15px; border-radius: 8px;">
          <h3 style="margin-top: 0; color: #334155;">Activation Rate</h3>
          <p style="font-size: 24px; font-weight: bold; margin: 10px 0; color: #334155;">${metrics.activationRate}%</p>
          <p style="color: #666; font-size: 14px; margin: 0;">Users who become active</p>
        </div>
        <div style="background: #fef2f2; padding: 15px; border-radius: 8px;">
          <h3 style="margin-top: 0; color: #dc2626;">Monthly Churn Rate</h3>
          <p style="font-size: 24px; font-weight: bold; margin: 10px 0; color: #dc2626;">${metrics.monthlyChurnRate}%</p>
          <p style="color: #666; font-size: 14px; margin: 0;">Customers lost per month</p>
        </div>
      </div>

      ${recommendations.length > 0 ? `
        <div style="border-top: 2px solid #e5e7eb; padding-top: 20px;">
          <h2 style="color: #333; margin-bottom: 15px;">üìù Recommendations</h2>
          <ul style="color: #666; line-height: 1.6;">
            ${recommendations.map(rec => `<li style="margin-bottom: 8px;">${rec}</li>`).join('')}
          </ul>
        </div>
      ` : ''}

      <div style="border-top: 2px solid #e5e7eb; padding-top: 20px; text-align: center;">
        <p style="color: #999; font-size: 12px; margin: 0;">
          Generated by SaaS Metrics Playground ‚Ä¢ Your friendly metrics guide ü¶â
        </p>
      </div>
    `;

    document.body.appendChild(exportContainer);

    // Generate canvas from the container
    const canvas = await html2canvas(exportContainer, {
      width: 800,
      height: exportContainer.offsetHeight,
      scale: 2,
      backgroundColor: '#ffffff',
    });

    // Remove the temporary container
    document.body.removeChild(exportContainer);

    // Create PDF
    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF('p', 'mm', 'a4');
    
    const pdfWidth = pdf.internal.pageSize.getWidth();
    const pdfHeight = (canvas.height * pdfWidth) / canvas.width;
    
    pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
    
    // Generate filename
    const scenarioName = scenario ? `-${scenario.name.replace(/\s+/g, '-').toLowerCase()}` : '';
    const filename = `saas-metrics-report${scenarioName}-${timestamp.toISOString().split('T')[0]}.pdf`;
    
    pdf.save(filename);
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF. Please try again.');
  }
}

export function createSnapshot(): string {
  const timestamp = new Date().toISOString();
  return `snapshot-${timestamp}`;
}

export function shareableLink(data: ExportData): string {
  // In a real app, this would generate a shareable link
  // For now, we'll just return a placeholder
  const encodedData = btoa(JSON.stringify({
    metrics: data.analysis.metrics,
    scenario: data.scenario?.id || null,
    timestamp: data.timestamp.toISOString(),
  }));
  
  return `${window.location.origin}?data=${encodedData}`;
}